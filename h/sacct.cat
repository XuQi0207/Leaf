SACCT(4)                Accounting records               SACCT(4)



NNAAMMEE
       ssaacccctt - CASTOR accounting records


SSYYNNOOPPSSIISS
       ##iinncclluuddee <<_s_a_c_c_t_._h>>


DDEESSCCRRIIPPTTIIOONN
       The  ssaacccctt..hh  header  file  contains  the structure of the
       accounting records written  by  the  CASTOR  applications.
       Every  record  is  composed  of a header, plus a body. All
       CASTOR  applications  on  a  machine  write  to  the  same
       accounting file, usually /usr/spool/sacct/sacct.

       The  structure  acchdr must be used to read the accounting
       header.

        struct accthdr { /* header for accounting record */
            time_t    timestamp;
            int  package; /* Type of record */
            int  len;     /* Length of the body */
        };

       The package identifies the type of the record,  and  indi­
       cates  which structure should be used to read its content.
       The structures are defined in sacct.h, and  explicit  what
       information  is  contained  in  the  record. The different
       packages, and their associated structures are:

       AACCCCTTSSYYSSTTEEMM
              Accounting for system events. Use ssttrruucctt aaccccttssyysstteemm
              to  read the content. The only availble information
              is the subtype field, indicating system shutdown or
              startup. These accounting records are not currently
              used by CASTOR.

       AACCCCTTRRFFIIOO6644
              RFIO accounting entries. Use ssttrruucctt  aaccccttrrffiioo6644  to
              read  the content. This record provides the type of
              request,  the  uid/gid  of  the  user  sending  the
              request,  the  filename,  as well as the summary of
              the of the data transfered.

       AACCCCTTTTAAPPEE
              Tape daemon accounting entries.  Use  ssttrruucctt  aacccctt­­
              ttaappee.   Information   provided   is:   uid/gid   of
              requestor, job id, the device  group  name  of  the
              drive,  the  drive  used, the vid requested and the
              file sequence  number  on  the  tape.  The  subtype
              fields indicates what action was actually performed
              by the tape daemon, or what happened to the  daemon
              the possible values are:
                   TPDSTART: tpdaemon started
                   TPASSIGN: drive assigned
                   TP2MOUNT: tape to be mounted
                   TPMOUNTED: tape mounted
                   TPPOSIT: tape positionned to requested file
                   TPUNLOAD: tape is unloading
                   TPFREE: drive freed
                   TPCONFUP: drive configured up
                   TPCONFDN: drive configured down
                   TPDGQ:  device group queue (not used anymore).

       AACCCCTTRRTTCCOOPPYY
              RTCOPY accounting  entries.  Use  ssttrruucctt  aaccccttrrttccpp.
              Contains  uid/gid  of requestor, the RTCOPY job id,
              the type of the request (Read, Write, or Dumptape),
              the  stager  request  ID if applicable, the size of
              the transfer when known as well as the client host,
              disk  server,  volume  ID and file sequence number.
              The different subtypes of RTCOPY accounting entries
              are:

                   RTCPCMDR: command received
                   RTCPPRC: completion of partial request
                   RTCPCMDC:  command  completed (with success or
              not)
                   RTCPPRR: retry of partial request
                   RTCPTPR: retry of tape mount
                   RTCPCMDD: Decrypted command line
                   RTCPEMSG: Error message

       AACCCCTTRRTTCCPPTTIIMM
              RTCOPY timing entries. Use ssttrruucctt  aaccccttrrttccpp__ttiimmiinngg.
              This records provide, for a given job timing infor­
              mation about the way the request was performed,  as
              well  as  the quantity of data transfered. There is
              no subtype for this accounting record.

       AACCCCTTSSTTAAGGEE6644
              Stager accounting entries. Use ssttrruucctt  aaccccttssttaaggee6644.
              These   records   give   information   about  stage
              requests, including request id,  requestor  uid/gid
              and  information  concerning  the  details  of  the
              request itself.  The subtypes are:

                   STGSTART: stgdaemon started
                   STGCMDR: command received
                   STGFILS: file staged
                   STGCMDC: command completed  (with  success  or
              not)
                   STGCMDS: stager started
                   STGFILC: file cleared




       UUSSAAGGEE   The accounting file is written using the machine's
              byte order. No marshalling is done at  write  time.
              When  reading  the  accounting  file  from a remote
              machine, the byte order used by the remote platform
              must  be  taken into account. The following example
              shows how to read the accounting file.


       #include <stdlib.h>
       #include <fcntl.h>
       #include <string.h>

       #include "sacct.h" /* For CASTOR Accounting records definition */
       #include "rfio_api.h" /* To open accounting files remotely using rfio */
       #include "serrno.h" /* For CASTOR errors */

       #define STAGER_ACCT "stagepublic:/usr/spool/sacct/sacct"

       int size_read = 0;

       #define swap_it(a) swab((char *)&a,(char *)&a,sizeof(a));           a=((unsigned int)a<<16)|((unsigned int)a>>16);

       int getacctrec _PROTO((int, struct accthdr *, char *, int *));

       /*  This programs opens a remote accounting file,
           and reads all the acctstage64 records */
       int main(argc, argv)
            int argc;
            char **argv;
       {

         int fd_acct;                  /* File descriptor for remote file */
         struct accthdr accthdr;          /* accthdr record */
         struct acctstage64 rp;      /* accstage2 record */
         int swapped = 0;       /* flag set if byte order swapped */

         char *stgcmd[20] = { "STGSTART", "STGCMDR", "STGFILS",
                        "STGCMDC", "STGCMDS", "STGFILC" };

         printf("Opening accounting file\n");

         if ((fd_acct = rfio_open (STAGER_ACCT, O_RDONLY)) < 0) {
           fprintf (stderr, "%s : rfio_open error : %s\n", STAGER_ACCT, rfio_serror());
           exit (EXIT_FAILURE);
         }

         printf("Reading all records\n");

         while (getacctrec (fd_acct, &accthdr, (char *) &rp, &swapped) > 0) {
           if (accthdr.package == ACCTSTAGE64) {
             if (swapped) {
               swap_it(rp.subtype);
            swap_it(rp.uid);
               swap_it(rp.gid);
             }
             printf("Request Type: %s, from %d/%d\n",
             stgcmd[rp.subtype], rp.uid, rp.gid);
           }
         }

         rfio_close(fd_acct);
         exit(EXIT_SUCCESS);

       }

       /* Function that reads the accounting records, s
          kipping the records which
          subtype is not ACCTSTAGE64 */
       int getacctrec (fd_acct, accthdr, buf,swapped)
            int fd_acct;
            struct accthdr *accthdr;
            char *buf;
            int *swapped;
       {
         int c;

         rfio_errno = serrno = 0;
         if ((c = rfio_read (fd_acct,accthdr,sizeof(struct accthdr)))
         != sizeof(struct accthdr)) {
           if (c == 0) return (0);
           if (c > 0)
             fprintf (stderr, "rfio_read returns %d\n", c);
           else
             fprintf (stderr, "rfio_read error : %s\n", rfio_serror());
           exit(EXIT_FAILURE);
         }

         size_read += c;

         /* If package is > 255 then byte order needs swapping */

         if (accthdr->package > 255) {
           swap_it (accthdr->package);
           swap_it (accthdr->len);
           swap_it (accthdr->timestamp);
           *swapped = 1;
         }

         if (accthdr->package != ACCTSTAGE64) {
           /* Not a STAGE accouting record - we just seek the pointer */
           rfio_errno = serrno = 0;
           if (rfio_lseek(fd_acct, accthdr->len, SEEK_CUR) < 0) {
             fprintf (stderr, "rfio_lseek error : %s\n", rfio_serror());
             exit (EXIT_FAILURE);
           }
           size_read += accthdr->len;
           return (accthdr->len);
         }

         /* We have an ACCTSTAGE64 record */

         if ((c = rfio_read (fd_acct, buf, accthdr->len)) != accthdr->len) {
           if (c >= 0)
             fprintf (stderr, "rfio_read returns %d\n",c);
           else
             fprintf (stderr, "rfio_read error : %s\n", rfio_serror());
           exit (EXIT_FAILURE);
         }

         size_read += c;
         return (accthdr->len);
       }


AAUUTTHHOORR
       CCAASSTTOORR Team <castor.support@cern.ch>







CASTOR                 2002/11/22 09:14:58               SACCT(4)
