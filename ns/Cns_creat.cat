CNS_CREAT(3)          Cns Library Functions          CNS_CREAT(3)



NNAAMMEE
       Cns_creat  -  create  a new CASTOR file or reset it in the
       name server

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee ""CCnnss__aappii..hh""

       iinntt CCnnss__ccrreeaatt ((ccoonnsstt cchhaarr **_p_a_t_h,, mmooddee__tt _m_o_d_e))

       iinntt CCnnss__ccrreeaattxx ((ccoonnsstt  cchhaarr  **_p_a_t_h,,  mmooddee__tt  _m_o_d_e,,  ssttrruucctt
       CCnnss__ffiilleeiidd **_f_i_l_e___u_n_i_q_u_e_i_d))

DDEESSCCRRIIPPTTIIOONN
       CCnnss__ccrreeaatt  creates  a  new CASTOR file or resets it in the
       name server.

       If the file exists, the length is truncated to 0  and  the
       mode and owner are unchanged.

       If the file does not exist yet, an entry is created in the
       name server database and the file's owner ID is set to the
       effective  user  ID of the requestor.  The group ID of the
       file is set to the effective group ID of the requestor  or
       is  taken  from the parent directory if the latter has the
       SS__IISSGGIIDD bit set.

       The access permission bits for the  file  are  taken  from
       _m_o_d_e,  then all bits set in the requestor's file mode cre­
       ation mask are cleared (see CCnnss__uummaasskk(3)).

       CCnnss__ccrreeaattxx behaves in the same way and  returns  the  file
       unique id (name server hostname and file id).

       _p_a_t_h   specifies the logical pathname relative to the cur­
              rent CASTOR directory or the full CASTOR  pathname.

RREETTUURRNN VVAALLUUEE
       This  routine returns 0 if the operation was successful or
       -1 if the operation failed. In the latter case, sseerrrrnnoo  is
       set appropriately.

EERRRROORRSS
       EENNOOEENNTT       A  component of _p_a_t_h prefix does not exist or
                    _p_a_t_h is a null pathname.

       EEAACCCCEESS       Search permission is denied on a component of
                    the  _p_a_t_h  prefix  or the file does not exist
                    and write permission on the parent  directory
                    is  denied  or the file exists and write per­
                    mission on the file itself is denied.

       EEFFAAUULLTT       _p_a_t_h or _f_i_l_e___u_n_i_q_u_e_i_d is a NULL pointer.

       EENNOOTTDDIIRR      A component of _p_a_t_h prefix is  not  a  direc­
                    tory.

       EEIISSDDIIRR       _p_a_t_h is an existing directory.

       EEIINNVVAALL       The  fileclass  in  the  parent  directory is
                    zero.

       EENNOOSSPPCC       The name server database is full.

       EENNAAMMEETTOOOOLLOONNGG The length of _p_a_t_h exceeds  CCAA__MMAAXXPPAATTHHLLEENN  or
                    the   length  of  a  _p_a_t_h  component  exceeds
                    CCAA__MMAAXXNNAAMMEELLEENN.

       SSEENNOOSSHHOOSSTT    Host unknown.

       SSEENNOOSSSSEERRVV    Service unknown.

       SSEECCOOMMEERRRR     Communication error.

       EENNSSNNAACCTT      Name server is not running or is being  shut­
                    down.

SSEEEE AALLSSOO
       CCaassttoorr__lliimmiittss((44)), CCnnss__cchhddiirr((33)), CCnnss__cchhmmoodd((33)), CCnnss__ssttaatt((33)),
       CCnnss__uummaasskk((33))

AAUUTTHHOORR
       CCAASSTTOORR Team <castor.support@cern.ch>



CASTOR                 2003/09/22 06:26:46           CNS_CREAT(3)
